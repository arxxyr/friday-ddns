name: Docker构建单架构镜像

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 构建并推送单架构Docker镜像
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录GitHub容器注册表
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      # 构建并推送AMD64版本 (基于Ubuntu)
      - name: 构建并推送AMD64版本
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ubuntu-amd64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建并推送ARM64版本 (基于Ubuntu)
      - name: 构建并推送ARM64版本
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.ubuntu-arm64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 输出标签信息到文件，用于后续工作流
      - name: 输出标签信息
        if: github.event_name != 'pull_request'
        run: |
          echo '${{ steps.meta.outputs.json }}' > docker-tags.json
      
      # 上传标签文件作为构件
      - name: 上传标签文件
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: docker-tags
          path: docker-tags.json
          retention-days: 1 