name: Docker创建多架构清单

on:
  workflow_run:
    workflows: ["Docker构建单架构镜像"]
    types:
      - completed
    branches: [master]
    tags: ['v*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-manifest:
    name: 创建多架构清单
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 启用Docker CLI实验特性
        run: |
          mkdir -p ~/.docker
          echo '{"experimental": "enabled"}' > ~/.docker/config.json

      - name: 登录GitHub容器注册表
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 下载标签信息
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            const matchArtifact = artifacts.data.artifacts.find(artifact => artifact.name === "docker-tags");
            if (!matchArtifact) {
              core.setFailed('未找到docker-tags构件');
              return;
            }
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip'
            });
            
            const fs = require('fs');
            fs.writeFileSync('artifact.zip', Buffer.from(download.data));
            
            const { execSync } = require('child_process');
            execSync('unzip artifact.zip');

      - name: 创建多架构清单
        run: |
          # 从JSON文件中提取标签
          TAGS=$(cat docker-tags.json | jq -r '.tags[]')
          
          # 遍历标签并创建清单
          for tag in $TAGS; do
            echo "创建多架构清单: $tag"
            
            docker manifest create "$tag" \
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64" \
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64"
            
            echo "推送多架构清单: $tag"
            docker manifest push "$tag"
          done 