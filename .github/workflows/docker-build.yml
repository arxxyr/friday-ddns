name: Docker构建与发布

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    name: 构建并推送Docker镜像
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置QEMU
        uses: docker/setup-qemu-action@v3

      - name: 设置Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 启用Docker CLI实验特性
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

      - name: 登录GitHub容器注册表
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

      # 构建并推送AMD64版本
      - name: 构建并推送AMD64版本
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.amd64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 构建并推送ARM64版本
      - name: 构建并推送ARM64版本
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.arm64
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/arm64
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 创建并推送多架构清单
      - name: 创建并推送多架构清单
        if: github.event_name != 'pull_request'
        run: |
          # 保存标签到文件中
          echo '${{ steps.meta.outputs.tags }}' > /tmp/tags.txt
          
          # 遍历每个标签
          cat /tmp/tags.txt | while read tag; do
            # 跳过空行
            [ -z "$tag" ] && continue
            
            echo "创建多架构清单: $tag"
            docker manifest create "$tag" \
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:amd64" \
              "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:arm64"
            
            echo "推送多架构清单: $tag"
            docker manifest push "$tag" 